View(l)
l = l(!is.na(l))
l <- l(!is.na(l))
l <- l[!is.na(l)]
mean(l)
data <- read.csv("D:\\acer\\Documents\\PhD application\\Polymtl\\Internship2020\\rrsg2020\\analysis\\databases\\3T_NIST_T1maps_database.csv")
#Germany
submission <- 1:40
cnt = 1
meanValues <- data.frame()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\.   "," ",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
#dataSphere = gsub("\\.[[:digit:]]  "," ",dataSphere)
dataSphere = gsub("\\.\n","\n",dataSphere)
dataSphere = gsub("\\\n  "," ",dataSphere)
dataSphere = gsub("\\\n","",dataSphere)
dataSphere = gsub("\\. ","",dataSphere)
dataSphere = gsub("\\  "," ",dataSphere)
dataSphere = gsub("\\[ |[[:digit:]]   ","",dataSphere)
dataSphere = gsub("\\[|[[:digit:]]   ","",dataSphere)
dataSphere = gsub("[]]","",as.matrix(dataSphere))
dataSphere = as.numeric(unlist(strsplit(dataSphere," ")))
meanValues[i,j] <- mean(dataSphere, na.rm=TRUE)
}
cnt = cnt + 1
}
g = as.list(l)
View(g)
mean(g)
mean(as.numeric(g))
t = gsub("\\.   "," ",data[18,39])
t = gsub("\\.\n","\n",t)
t = gsub("\\\n  "," ",t)
t = gsub("\\\n","",t)
#t = gsub("\\.[[:digit:]]  "," ",t)
t = gsub("\\. ","",t)
t = gsub("\\  "," ",t)
t = gsub("\\   "," ",t)
#t = gsub("\\.[[:digit:]]   "," ",t)
t = gsub("\\[ |[[:digit:]]   ","",t)
t = gsub("\\[|[[:digit:]]   ","",t)
t = gsub("[]]","",as.matrix(t))
l = as.matrix(as.numeric(strsplit(t," ")))
data <- read.csv("D:\\acer\\Documents\\PhD application\\Polymtl\\Internship2020\\rrsg2020\\analysis\\databases\\3T_NIST_T1maps_database.csv")
#Germany
submission <- 1:40
cnt = 1
meanValues <- data.frame()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\.   "," ",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
#dataSphere = gsub("\\.[[:digit:]]  "," ",dataSphere)
dataSphere = gsub("\\.\n","\n",dataSphere)
dataSphere = gsub("\\\n  "," ",dataSphere)
dataSphere = gsub("\\\n","",dataSphere)
dataSphere = gsub("\\. ","",dataSphere)
dataSphere = gsub("\\  "," ",dataSphere)
dataSphere = gsub("\\[ |[[:digit:]]   ","",dataSphere)
dataSphere = gsub("\\[|[[:digit:]]   ","",dataSphere)
dataSphere = gsub("[]]","",as.matrix(dataSphere))
dataSphere = as.numeric(unlist(strsplit(dataSphere," ")))
dataSphere = dataSphere[!is.na(dataSphere)]
cleanValues[i,j] <- as.list(dataSphere)
}
cnt = cnt + 1
}
cleanValues <- data.frame()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\.   "," ",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
#dataSphere = gsub("\\.[[:digit:]]  "," ",dataSphere)
dataSphere = gsub("\\.\n","\n",dataSphere)
dataSphere = gsub("\\\n  "," ",dataSphere)
dataSphere = gsub("\\\n","",dataSphere)
dataSphere = gsub("\\. ","",dataSphere)
dataSphere = gsub("\\  "," ",dataSphere)
dataSphere = gsub("\\[ |[[:digit:]]   ","",dataSphere)
dataSphere = gsub("\\[|[[:digit:]]   ","",dataSphere)
dataSphere = gsub("[]]","",as.matrix(dataSphere))
dataSphere = as.numeric(unlist(strsplit(dataSphere," ")))
dataSphere = dataSphere[!is.na(dataSphere)]
cleanValues[i,j] <- as.list(dataSphere)
}
cnt = cnt + 1
}
View(cleanValues)
cleanValues <- data.frame()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\.   "," ",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
#dataSphere = gsub("\\.[[:digit:]]  "," ",dataSphere)
dataSphere = gsub("\\.\n","\n",dataSphere)
dataSphere = gsub("\\\n  "," ",dataSphere)
dataSphere = gsub("\\\n","",dataSphere)
dataSphere = gsub("\\. ","",dataSphere)
dataSphere = gsub("\\  "," ",dataSphere)
dataSphere = gsub("\\[ |[[:digit:]]   ","",dataSphere)
dataSphere = gsub("\\[|[[:digit:]]   ","",dataSphere)
dataSphere = gsub("[]]","",as.matrix(dataSphere))
dataSphere = as.numeric(unlist(strsplit(dataSphere," ")))
dataSphere = dataSphere[!is.na(dataSphere)]
cleanValues[i,j] = as.list(dataSphere)
}
cnt = cnt + 1
}
warnings()
cleanValues[1,1]
#Germany
submission <- 1:40
cnt = 1
cleanValues <- data.frame()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\.   "," ",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
#dataSphere = gsub("\\.[[:digit:]]  "," ",dataSphere)
dataSphere = gsub("\\.\n","\n",dataSphere)
dataSphere = gsub("\\\n  "," ",dataSphere)
dataSphere = gsub("\\\n","",dataSphere)
dataSphere = gsub("\\. ","",dataSphere)
dataSphere = gsub("\\  "," ",dataSphere)
dataSphere = gsub("\\[ |[[:digit:]]   ","",dataSphere)
dataSphere = gsub("\\[|[[:digit:]]   ","",dataSphere)
dataSphere = gsub("[]]","",as.matrix(dataSphere))
dataSphere = as.numeric(unlist(strsplit(dataSphere," ")))
dataSphere = dataSphere[!is.na(dataSphere)]
cleanValues[i,j] = dataSphere
}
cnt = cnt + 1
}
#Germany
submission <- 1:40
cnt = 1
#cleanValues <- data.frame()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\.   "," ",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
#dataSphere = gsub("\\.[[:digit:]]  "," ",dataSphere)
dataSphere = gsub("\\.\n","\n",dataSphere)
dataSphere = gsub("\\\n  "," ",dataSphere)
dataSphere = gsub("\\\n","",dataSphere)
dataSphere = gsub("\\. ","",dataSphere)
dataSphere = gsub("\\  "," ",dataSphere)
dataSphere = gsub("\\[ |[[:digit:]]   ","",dataSphere)
dataSphere = gsub("\\[|[[:digit:]]   ","",dataSphere)
dataSphere = gsub("[]]","",as.matrix(dataSphere))
dataSphere = as.numeric(unlist(strsplit(dataSphere," ")))
dataSphere = dataSphere[!is.na(dataSphere)]
cleanValues[i,j] = dataSphere
}
cnt = cnt + 1
}
data <- read.csv("D:\\acer\\Documents\\PhD application\\Polymtl\\Internship2020\\rrsg2020\\analysis\\databases\\3T_NIST_T1maps_database.csv")
#Germany
submission <- 1:40
cnt = 1
#cleanValues <- data.frame()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\.   "," ",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
#dataSphere = gsub("\\.[[:digit:]]  "," ",dataSphere)
dataSphere = gsub("\\.\n","\n",dataSphere)
dataSphere = gsub("\\\n  "," ",dataSphere)
dataSphere = gsub("\\\n","",dataSphere)
dataSphere = gsub("\\. ","",dataSphere)
dataSphere = gsub("\\  "," ",dataSphere)
dataSphere = gsub("\\[ |[[:digit:]]   ","",dataSphere)
dataSphere = gsub("\\[|[[:digit:]]   ","",dataSphere)
dataSphere = gsub("[]]","",as.matrix(dataSphere))
dataSphere = as.numeric(unlist(strsplit(dataSphere," ")))
dataSphere = dataSphere[!is.na(dataSphere)]
cleanValues[i,j] = dataSphere
}
cnt = cnt + 1
}
#Germany
submission <- 1:40
cnt = 1
#cleanValues <- data.frame()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\.   "," ",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
#dataSphere = gsub("\\.[[:digit:]]  "," ",dataSphere)
dataSphere = gsub("\\.\n","\n",dataSphere)
dataSphere = gsub("\\\n  "," ",dataSphere)
dataSphere = gsub("\\\n","",dataSphere)
dataSphere = gsub("\\. ","",dataSphere)
dataSphere = gsub("\\  "," ",dataSphere)
dataSphere = gsub("\\[ |[[:digit:]]   ","",dataSphere)
dataSphere = gsub("\\[|[[:digit:]]   ","",dataSphere)
dataSphere = gsub("[]]","",as.matrix(dataSphere))
dataSphere = as.numeric(unlist(strsplit(dataSphere," ")))
dataSphere = dataSphere[!is.na(dataSphere)]
cleanValues[i,j] = as.data.frame(dataSphere)
}
cnt = cnt + 1
}
cleanValues <- data.frame()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\.   "," ",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
#dataSphere = gsub("\\.[[:digit:]]  "," ",dataSphere)
dataSphere = gsub("\\.\n","\n",dataSphere)
dataSphere = gsub("\\\n  "," ",dataSphere)
dataSphere = gsub("\\\n","",dataSphere)
dataSphere = gsub("\\. ","",dataSphere)
dataSphere = gsub("\\  "," ",dataSphere)
dataSphere = gsub("\\[ |[[:digit:]]   ","",dataSphere)
dataSphere = gsub("\\[|[[:digit:]]   ","",dataSphere)
dataSphere = gsub("[]]","",as.matrix(dataSphere))
dataSphere = as.numeric(unlist(strsplit(dataSphere," ")))
dataSphere = dataSphere[!is.na(dataSphere)]
cleanValues[i,j] = as.data.frame(dataSphere)
}
cnt = cnt + 1
}
View(mixlm)
data <- read.csv("D:\\acer\\Documents\\PhD application\\Polymtl\\Internship2020\\rrsg2020\\analysis\\databases\\3T_NIST_T1maps_database.csv")
data[] <- gsub("[][]", "", as.matrix(data))
submission <- 1:40
listSpheres = list()
list2append = list()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\. ","",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
dataSphere = as.matrix(as.numeric(unlist(strsplit(dataSphere," "))))
dataSphere = dataSphere[!is.na(dataSphere)]
list2append[[j]] = dataSphere
}
listSpheres[[i]] = list2append
}
germany <- 19:24
anovaGer <- data.frame(T1=numeric(),group=numeric())
for (j in seq(1,2)){
flag = 1
for (k in germany){
if (flag==1){
firstIndex = 0
lastIndex = 0
}
sample = as.numeric(unlist(listSpheres[[k]][j]))
lastIndex = length(sample)
anovaGer[(1+firstIndex):(firstIndex+lastIndex),1] = sample
anovaGer[(1+firstIndex):(firstIndex+lastIndex),2] = rep(as.numeric(data[k,"id"]),length(sample))
firstIndex = firstIndex + length(sample)
flag = 0
}
}
anovaGer$group <- as.factor(anovaGer$group)
res.aov <- aov(T1 ~ group, data = anovaGer[1:firstIndex,])
summary(res.aov)
TukeyHSD(res.aov)
germany <- 19:24
sample (germany, size=3, replace =F)
sample (germany, size=3, replace =T)
sample (germany, size=3, replace =T)
sample (germany, size=3, replace =T)
sample (germany, size=3, replace =T)
sample (germany, size=3, replace =F)
sample (germany, size=3, replace =F)
library("reticulate")
library("Metrics")
library("ggplot2")
library("epiR")
library("lme4")
library("irr")
library("sjPlot")
library("plotly")
path_to_CSVfile = "D:\\acer\\Documents\\PhD application\\Polymtl\\Internship2020\\rrsg2020\\analysis\\databases\\"
path_to_src = "D:\\acer\\Documents\\PhD application\\Polymtl\\Internship2020\\rrsg2020-stats-dashboard\\plot\\"
path_to_python = "D:\\Instalaciones\\Anaconda\\Anaconda3"
##Call Python script from R##
use_python(path_to_python, required=T)
source_python(paste(path_to_src, "nist.py", sep = ""))
data <- read.csv(paste(path_to_CSVfile, "3T_NIST_T1maps_database.csv", sep = ""))
data[] <- gsub("[][]", "", as.matrix(data))
submission <- 1:40
listSpheres = list()
list2append = list()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\. ","",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
dataSphere = as.matrix(as.numeric(unlist(strsplit(dataSphere," "))))
dataSphere = dataSphere[!is.na(dataSphere)]
list2append[[j]] = dataSphere
}
listSpheres[[i]] = list2append
}
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
scans <- 1:4
RefVSMeas <- measuredT1_against_referenceT1(scans)
RefVSMeas$test
RefVSMeas$BAData
cor(RefVSMeas$BAData$measValue,RefVSMeas$BAData$reference)
icc(RefVSMeas$BAData$measValue, RefVSMeas$BAData$reference, model = "oneway", type = "agreement")
a=RefVSMeas$BAData
data.frame(a$measValue, a$reference)
b=data.frame(a$measValue, a$reference)
icc(b, model = "oneway", type = "agreement")
icc(b, model = "twoway", type = "agreement")
setwd("D:/acer/Documents/PhD application/Polymtl/Internship2020/rrsg2020-stats-dashboard/plot")
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
library("reticulate")
library("Metrics")
library("ggplot2")
library("epiR")
library("lme4")
library("irr")
library("sjPlot")
library("plotly")
path_to_CSVfile = "D:\\acer\\Documents\\PhD application\\Polymtl\\Internship2020\\rrsg2020\\analysis\\databases\\"
path_to_src = "D:\\acer\\Documents\\PhD application\\Polymtl\\Internship2020\\rrsg2020-stats-dashboard\\plot\\"
path_to_python = "D:\\Instalaciones\\Anaconda\\Anaconda3"
##Call Python script from R##
use_python(path_to_python, required=T)
source_python(paste(path_to_src, "nist.py", sep = ""))
data <- read.csv(paste(path_to_CSVfile, "3T_NIST_T1maps_database.csv", sep = ""))
data[] <- gsub("[][]", "", as.matrix(data))
submission <- 1:40
listSpheres = list()
list2append = list()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\. ","",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
dataSphere = as.matrix(as.numeric(unlist(strsplit(dataSphere," "))))
dataSphere = dataSphere[!is.na(dataSphere)]
list2append[[j]] = dataSphere
}
listSpheres[[i]] = list2append
}
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(Germany)
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
RefVSMeas$test2
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
scans <- 1:4
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
RefVSMeas$test2
a=RefVSMeas$test2
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
scans <- 1:4
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
a=RefVSMeas$test2
View(a)
icc(a, model = "twoway", type = "agreement")
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
scans <- 1:4
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans = Germany)
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(13:26)
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
scans <- Germany
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
scans <- 1:4
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
RefVSMeas$test2
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans = Germany)
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(13:26)
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(1:6)
RefVSMeas$test2
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(1:6)
scans <- 1:4
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(1:6)
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(1:6)
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(2:6)
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(2:6)
RefVSMeas$test2
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
RefVSMeas$test2
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans = Germany)
RefVSMeas$test2
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans = Canada)
RefVSMeas$test2
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
RefVSMeas$test2
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans = Germany)
RefVSMeas$test2
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans = Canada)
RefVSMeas$test2
RefVSMeas$test
RefVSMeas$BAData
cor(RefVSMeas$BAData$measValue, RefVS)
cor(RefVSMeas$BAData$measValue, RefVSMeas$BAData$reference)
epi.ccc(RefVSMeas$BAData$measValue, RefVSMeas$BAData$reference)
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
RefVSMeas$test2
RefVSMeas$Correlation_coefficients
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
RefVSMeas$test2
RefVSMeas$Correlation_coefficients
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
library("reticulate")
library("Metrics")
library("ggplot2")
library("epiR")
library("lme4")
library("irr")
library("sjPlot")
library("plotly")
path_to_CSVfile = "D:\\acer\\Documents\\PhD application\\Polymtl\\Internship2020\\rrsg2020\\analysis\\databases\\"
path_to_src = "D:\\acer\\Documents\\PhD application\\Polymtl\\Internship2020\\rrsg2020-stats-dashboard\\plot\\"
path_to_python = "D:\\Instalaciones\\Anaconda\\Anaconda3"
##Call Python script from R##
use_python(path_to_python, required=T)
source_python(paste(path_to_src, "nist.py", sep = ""))
data <- read.csv(paste(path_to_CSVfile, "3T_NIST_T1maps_database.csv", sep = ""))
data[] <- gsub("[][]", "", as.matrix(data))
submission <- 1:40
listSpheres = list()
list2append = list()
for (i in submission){
for (j in seq(1,14)){
dataSphere = gsub("\\. ","",data[i,j+grep("^T1...NIST.sphere.1$", colnames(data))-1])
dataSphere = as.matrix(as.numeric(unlist(strsplit(dataSphere," "))))
dataSphere = dataSphere[!is.na(dataSphere)]
list2append[[j]] = dataSphere
}
listSpheres[[i]] = list2append
}
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
scans <- 1:4
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
scans <- 1:4
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
RefVSMeas$BAData
##COMPARISON BETWEEN MEASURED AND REFERENCE T1 VALUES##
source(paste(path_to_src, "measuredT1_against_referenceT1.R", sep = ""))
scans <- 1:4
#scans <- list(Germany, Canada)
RefVSMeas <- measuredT1_against_referenceT1(scans)
RefVSMeas$corr_coef_site
cor(RefVSMeas$BAData$measValue, RefVSMeas$BAData$reference
)
epi.ccc(RefVSMeas$BAData$measValue, RefVSMeas$BAData$reference)
a=epi.ccc(RefVSMeas$BAData$measValue, RefVSMeas$BAData$reference)
a[[1]][1]
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
shiny::runApp('ShinyDashboard')
